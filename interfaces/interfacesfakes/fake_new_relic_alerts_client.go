// Code generated by counterfeiter. DO NOT EDIT.
package interfacesfakes

import (
	"sync"

	"github.com/newrelic/newrelic-client-go/pkg/alerts"
	"github.com/newrelic/newrelic-kubernetes-operator/interfaces"
)

type FakeNewRelicAlertsClient struct {
	CreateChannelStub        func(alerts.Channel) (*alerts.Channel, error)
	createChannelMutex       sync.RWMutex
	createChannelArgsForCall []struct {
		arg1 alerts.Channel
	}
	createChannelReturns struct {
		result1 *alerts.Channel
		result2 error
	}
	createChannelReturnsOnCall map[int]struct {
		result1 *alerts.Channel
		result2 error
	}
	CreateConditionStub        func(int, alerts.Condition) (*alerts.Condition, error)
	createConditionMutex       sync.RWMutex
	createConditionArgsForCall []struct {
		arg1 int
		arg2 alerts.Condition
	}
	createConditionReturns struct {
		result1 *alerts.Condition
		result2 error
	}
	createConditionReturnsOnCall map[int]struct {
		result1 *alerts.Condition
		result2 error
	}
	CreateNrqlConditionStub        func(int, alerts.NrqlCondition) (*alerts.NrqlCondition, error)
	createNrqlConditionMutex       sync.RWMutex
	createNrqlConditionArgsForCall []struct {
		arg1 int
		arg2 alerts.NrqlCondition
	}
	createNrqlConditionReturns struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	createNrqlConditionReturnsOnCall map[int]struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	CreateNrqlConditionStaticMutationStub        func(int, string, alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error)
	createNrqlConditionStaticMutationMutex       sync.RWMutex
	createNrqlConditionStaticMutationArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 alerts.NrqlConditionInput
	}
	createNrqlConditionStaticMutationReturns struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}
	createNrqlConditionStaticMutationReturnsOnCall map[int]struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}
	CreatePolicyStub        func(alerts.Policy) (*alerts.Policy, error)
	createPolicyMutex       sync.RWMutex
	createPolicyArgsForCall []struct {
		arg1 alerts.Policy
	}
	createPolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	createPolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	CreatePolicyMutationStub        func(int, alerts.AlertsPolicyInput) (*alerts.AlertsPolicy, error)
	createPolicyMutationMutex       sync.RWMutex
	createPolicyMutationArgsForCall []struct {
		arg1 int
		arg2 alerts.AlertsPolicyInput
	}
	createPolicyMutationReturns struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	createPolicyMutationReturnsOnCall map[int]struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	DeleteChannelStub        func(int) (*alerts.Channel, error)
	deleteChannelMutex       sync.RWMutex
	deleteChannelArgsForCall []struct {
		arg1 int
	}
	deleteChannelReturns struct {
		result1 *alerts.Channel
		result2 error
	}
	deleteChannelReturnsOnCall map[int]struct {
		result1 *alerts.Channel
		result2 error
	}
	DeleteConditionStub        func(int) (*alerts.Condition, error)
	deleteConditionMutex       sync.RWMutex
	deleteConditionArgsForCall []struct {
		arg1 int
	}
	deleteConditionReturns struct {
		result1 *alerts.Condition
		result2 error
	}
	deleteConditionReturnsOnCall map[int]struct {
		result1 *alerts.Condition
		result2 error
	}
	DeleteConditionMutationStub        func(int, string) (string, error)
	deleteConditionMutationMutex       sync.RWMutex
	deleteConditionMutationArgsForCall []struct {
		arg1 int
		arg2 string
	}
	deleteConditionMutationReturns struct {
		result1 string
		result2 error
	}
	deleteConditionMutationReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DeleteNrqlConditionStub        func(int) (*alerts.NrqlCondition, error)
	deleteNrqlConditionMutex       sync.RWMutex
	deleteNrqlConditionArgsForCall []struct {
		arg1 int
	}
	deleteNrqlConditionReturns struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	deleteNrqlConditionReturnsOnCall map[int]struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	DeletePolicyStub        func(int) (*alerts.Policy, error)
	deletePolicyMutex       sync.RWMutex
	deletePolicyArgsForCall []struct {
		arg1 int
	}
	deletePolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	deletePolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	DeletePolicyChannelStub        func(int, int) (*alerts.Channel, error)
	deletePolicyChannelMutex       sync.RWMutex
	deletePolicyChannelArgsForCall []struct {
		arg1 int
		arg2 int
	}
	deletePolicyChannelReturns struct {
		result1 *alerts.Channel
		result2 error
	}
	deletePolicyChannelReturnsOnCall map[int]struct {
		result1 *alerts.Channel
		result2 error
	}
	DeletePolicyMutationStub        func(int, string) (*alerts.AlertsPolicy, error)
	deletePolicyMutationMutex       sync.RWMutex
	deletePolicyMutationArgsForCall []struct {
		arg1 int
		arg2 string
	}
	deletePolicyMutationReturns struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	deletePolicyMutationReturnsOnCall map[int]struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	GetNrqlConditionQueryStub        func(int, string) (*alerts.NrqlAlertCondition, error)
	getNrqlConditionQueryMutex       sync.RWMutex
	getNrqlConditionQueryArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getNrqlConditionQueryReturns struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}
	getNrqlConditionQueryReturnsOnCall map[int]struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}
	GetPolicyStub        func(int) (*alerts.Policy, error)
	getPolicyMutex       sync.RWMutex
	getPolicyArgsForCall []struct {
		arg1 int
	}
	getPolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	getPolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	ListChannelsStub        func() ([]*alerts.Channel, error)
	listChannelsMutex       sync.RWMutex
	listChannelsArgsForCall []struct {
	}
	listChannelsReturns struct {
		result1 []*alerts.Channel
		result2 error
	}
	listChannelsReturnsOnCall map[int]struct {
		result1 []*alerts.Channel
		result2 error
	}
	ListConditionsStub        func(int) ([]*alerts.Condition, error)
	listConditionsMutex       sync.RWMutex
	listConditionsArgsForCall []struct {
		arg1 int
	}
	listConditionsReturns struct {
		result1 []*alerts.Condition
		result2 error
	}
	listConditionsReturnsOnCall map[int]struct {
		result1 []*alerts.Condition
		result2 error
	}
	ListNrqlConditionsStub        func(int) ([]*alerts.NrqlCondition, error)
	listNrqlConditionsMutex       sync.RWMutex
	listNrqlConditionsArgsForCall []struct {
		arg1 int
	}
	listNrqlConditionsReturns struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}
	listNrqlConditionsReturnsOnCall map[int]struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}
	ListPoliciesStub        func(*alerts.ListPoliciesParams) ([]alerts.Policy, error)
	listPoliciesMutex       sync.RWMutex
	listPoliciesArgsForCall []struct {
		arg1 *alerts.ListPoliciesParams
	}
	listPoliciesReturns struct {
		result1 []alerts.Policy
		result2 error
	}
	listPoliciesReturnsOnCall map[int]struct {
		result1 []alerts.Policy
		result2 error
	}
	QueryPolicyStub        func(int, string) (*alerts.AlertsPolicy, error)
	queryPolicyMutex       sync.RWMutex
	queryPolicyArgsForCall []struct {
		arg1 int
		arg2 string
	}
	queryPolicyReturns struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	queryPolicyReturnsOnCall map[int]struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	QueryPolicySearchStub        func(int, alerts.AlertsPoliciesSearchCriteriaInput) ([]*alerts.AlertsPolicy, error)
	queryPolicySearchMutex       sync.RWMutex
	queryPolicySearchArgsForCall []struct {
		arg1 int
		arg2 alerts.AlertsPoliciesSearchCriteriaInput
	}
	queryPolicySearchReturns struct {
		result1 []*alerts.AlertsPolicy
		result2 error
	}
	queryPolicySearchReturnsOnCall map[int]struct {
		result1 []*alerts.AlertsPolicy
		result2 error
	}
	SearchNrqlConditionsQueryStub        func(int, alerts.NrqlConditionsSearchCriteria) ([]*alerts.NrqlAlertCondition, error)
	searchNrqlConditionsQueryMutex       sync.RWMutex
	searchNrqlConditionsQueryArgsForCall []struct {
		arg1 int
		arg2 alerts.NrqlConditionsSearchCriteria
	}
	searchNrqlConditionsQueryReturns struct {
		result1 []*alerts.NrqlAlertCondition
		result2 error
	}
	searchNrqlConditionsQueryReturnsOnCall map[int]struct {
		result1 []*alerts.NrqlAlertCondition
		result2 error
	}
	UpdateConditionStub        func(alerts.Condition) (*alerts.Condition, error)
	updateConditionMutex       sync.RWMutex
	updateConditionArgsForCall []struct {
		arg1 alerts.Condition
	}
	updateConditionReturns struct {
		result1 *alerts.Condition
		result2 error
	}
	updateConditionReturnsOnCall map[int]struct {
		result1 *alerts.Condition
		result2 error
	}
	UpdateNrqlConditionStub        func(alerts.NrqlCondition) (*alerts.NrqlCondition, error)
	updateNrqlConditionMutex       sync.RWMutex
	updateNrqlConditionArgsForCall []struct {
		arg1 alerts.NrqlCondition
	}
	updateNrqlConditionReturns struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	updateNrqlConditionReturnsOnCall map[int]struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	UpdateNrqlConditionStaticMutationStub        func(int, string, alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error)
	updateNrqlConditionStaticMutationMutex       sync.RWMutex
	updateNrqlConditionStaticMutationArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 alerts.NrqlConditionInput
	}
	updateNrqlConditionStaticMutationReturns struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}
	updateNrqlConditionStaticMutationReturnsOnCall map[int]struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}
	UpdatePolicyStub        func(alerts.Policy) (*alerts.Policy, error)
	updatePolicyMutex       sync.RWMutex
	updatePolicyArgsForCall []struct {
		arg1 alerts.Policy
	}
	updatePolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	updatePolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	UpdatePolicyChannelsStub        func(int, []int) (*alerts.PolicyChannels, error)
	updatePolicyChannelsMutex       sync.RWMutex
	updatePolicyChannelsArgsForCall []struct {
		arg1 int
		arg2 []int
	}
	updatePolicyChannelsReturns struct {
		result1 *alerts.PolicyChannels
		result2 error
	}
	updatePolicyChannelsReturnsOnCall map[int]struct {
		result1 *alerts.PolicyChannels
		result2 error
	}
	UpdatePolicyMutationStub        func(int, string, alerts.AlertsPolicyUpdateInput) (*alerts.AlertsPolicy, error)
	updatePolicyMutationMutex       sync.RWMutex
	updatePolicyMutationArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 alerts.AlertsPolicyUpdateInput
	}
	updatePolicyMutationReturns struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	updatePolicyMutationReturnsOnCall map[int]struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNewRelicAlertsClient) CreateChannel(arg1 alerts.Channel) (*alerts.Channel, error) {
	fake.createChannelMutex.Lock()
	ret, specificReturn := fake.createChannelReturnsOnCall[len(fake.createChannelArgsForCall)]
	fake.createChannelArgsForCall = append(fake.createChannelArgsForCall, struct {
		arg1 alerts.Channel
	}{arg1})
	fake.recordInvocation("CreateChannel", []interface{}{arg1})
	fake.createChannelMutex.Unlock()
	if fake.CreateChannelStub != nil {
		return fake.CreateChannelStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createChannelReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreateChannelCallCount() int {
	fake.createChannelMutex.RLock()
	defer fake.createChannelMutex.RUnlock()
	return len(fake.createChannelArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreateChannelCalls(stub func(alerts.Channel) (*alerts.Channel, error)) {
	fake.createChannelMutex.Lock()
	defer fake.createChannelMutex.Unlock()
	fake.CreateChannelStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreateChannelArgsForCall(i int) alerts.Channel {
	fake.createChannelMutex.RLock()
	defer fake.createChannelMutex.RUnlock()
	argsForCall := fake.createChannelArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) CreateChannelReturns(result1 *alerts.Channel, result2 error) {
	fake.createChannelMutex.Lock()
	defer fake.createChannelMutex.Unlock()
	fake.CreateChannelStub = nil
	fake.createChannelReturns = struct {
		result1 *alerts.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreateChannelReturnsOnCall(i int, result1 *alerts.Channel, result2 error) {
	fake.createChannelMutex.Lock()
	defer fake.createChannelMutex.Unlock()
	fake.CreateChannelStub = nil
	if fake.createChannelReturnsOnCall == nil {
		fake.createChannelReturnsOnCall = make(map[int]struct {
			result1 *alerts.Channel
			result2 error
		})
	}
	fake.createChannelReturnsOnCall[i] = struct {
		result1 *alerts.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreateCondition(arg1 int, arg2 alerts.Condition) (*alerts.Condition, error) {
	fake.createConditionMutex.Lock()
	ret, specificReturn := fake.createConditionReturnsOnCall[len(fake.createConditionArgsForCall)]
	fake.createConditionArgsForCall = append(fake.createConditionArgsForCall, struct {
		arg1 int
		arg2 alerts.Condition
	}{arg1, arg2})
	fake.recordInvocation("CreateCondition", []interface{}{arg1, arg2})
	fake.createConditionMutex.Unlock()
	if fake.CreateConditionStub != nil {
		return fake.CreateConditionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreateConditionCallCount() int {
	fake.createConditionMutex.RLock()
	defer fake.createConditionMutex.RUnlock()
	return len(fake.createConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreateConditionCalls(stub func(int, alerts.Condition) (*alerts.Condition, error)) {
	fake.createConditionMutex.Lock()
	defer fake.createConditionMutex.Unlock()
	fake.CreateConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreateConditionArgsForCall(i int) (int, alerts.Condition) {
	fake.createConditionMutex.RLock()
	defer fake.createConditionMutex.RUnlock()
	argsForCall := fake.createConditionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) CreateConditionReturns(result1 *alerts.Condition, result2 error) {
	fake.createConditionMutex.Lock()
	defer fake.createConditionMutex.Unlock()
	fake.CreateConditionStub = nil
	fake.createConditionReturns = struct {
		result1 *alerts.Condition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreateConditionReturnsOnCall(i int, result1 *alerts.Condition, result2 error) {
	fake.createConditionMutex.Lock()
	defer fake.createConditionMutex.Unlock()
	fake.CreateConditionStub = nil
	if fake.createConditionReturnsOnCall == nil {
		fake.createConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.Condition
			result2 error
		})
	}
	fake.createConditionReturnsOnCall[i] = struct {
		result1 *alerts.Condition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlCondition(arg1 int, arg2 alerts.NrqlCondition) (*alerts.NrqlCondition, error) {
	fake.createNrqlConditionMutex.Lock()
	ret, specificReturn := fake.createNrqlConditionReturnsOnCall[len(fake.createNrqlConditionArgsForCall)]
	fake.createNrqlConditionArgsForCall = append(fake.createNrqlConditionArgsForCall, struct {
		arg1 int
		arg2 alerts.NrqlCondition
	}{arg1, arg2})
	fake.recordInvocation("CreateNrqlCondition", []interface{}{arg1, arg2})
	fake.createNrqlConditionMutex.Unlock()
	if fake.CreateNrqlConditionStub != nil {
		return fake.CreateNrqlConditionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNrqlConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionCallCount() int {
	fake.createNrqlConditionMutex.RLock()
	defer fake.createNrqlConditionMutex.RUnlock()
	return len(fake.createNrqlConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionCalls(stub func(int, alerts.NrqlCondition) (*alerts.NrqlCondition, error)) {
	fake.createNrqlConditionMutex.Lock()
	defer fake.createNrqlConditionMutex.Unlock()
	fake.CreateNrqlConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionArgsForCall(i int) (int, alerts.NrqlCondition) {
	fake.createNrqlConditionMutex.RLock()
	defer fake.createNrqlConditionMutex.RUnlock()
	argsForCall := fake.createNrqlConditionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionReturns(result1 *alerts.NrqlCondition, result2 error) {
	fake.createNrqlConditionMutex.Lock()
	defer fake.createNrqlConditionMutex.Unlock()
	fake.CreateNrqlConditionStub = nil
	fake.createNrqlConditionReturns = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionReturnsOnCall(i int, result1 *alerts.NrqlCondition, result2 error) {
	fake.createNrqlConditionMutex.Lock()
	defer fake.createNrqlConditionMutex.Unlock()
	fake.CreateNrqlConditionStub = nil
	if fake.createNrqlConditionReturnsOnCall == nil {
		fake.createNrqlConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlCondition
			result2 error
		})
	}
	fake.createNrqlConditionReturnsOnCall[i] = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutation(arg1 int, arg2 string, arg3 alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error) {
	fake.createNrqlConditionStaticMutationMutex.Lock()
	ret, specificReturn := fake.createNrqlConditionStaticMutationReturnsOnCall[len(fake.createNrqlConditionStaticMutationArgsForCall)]
	fake.createNrqlConditionStaticMutationArgsForCall = append(fake.createNrqlConditionStaticMutationArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 alerts.NrqlConditionInput
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateNrqlConditionStaticMutation", []interface{}{arg1, arg2, arg3})
	fake.createNrqlConditionStaticMutationMutex.Unlock()
	if fake.CreateNrqlConditionStaticMutationStub != nil {
		return fake.CreateNrqlConditionStaticMutationStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNrqlConditionStaticMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutationCallCount() int {
	fake.createNrqlConditionStaticMutationMutex.RLock()
	defer fake.createNrqlConditionStaticMutationMutex.RUnlock()
	return len(fake.createNrqlConditionStaticMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutationCalls(stub func(int, string, alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error)) {
	fake.createNrqlConditionStaticMutationMutex.Lock()
	defer fake.createNrqlConditionStaticMutationMutex.Unlock()
	fake.CreateNrqlConditionStaticMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutationArgsForCall(i int) (int, string, alerts.NrqlConditionInput) {
	fake.createNrqlConditionStaticMutationMutex.RLock()
	defer fake.createNrqlConditionStaticMutationMutex.RUnlock()
	argsForCall := fake.createNrqlConditionStaticMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutationReturns(result1 *alerts.NrqlAlertCondition, result2 error) {
	fake.createNrqlConditionStaticMutationMutex.Lock()
	defer fake.createNrqlConditionStaticMutationMutex.Unlock()
	fake.CreateNrqlConditionStaticMutationStub = nil
	fake.createNrqlConditionStaticMutationReturns = struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutationReturnsOnCall(i int, result1 *alerts.NrqlAlertCondition, result2 error) {
	fake.createNrqlConditionStaticMutationMutex.Lock()
	defer fake.createNrqlConditionStaticMutationMutex.Unlock()
	fake.CreateNrqlConditionStaticMutationStub = nil
	if fake.createNrqlConditionStaticMutationReturnsOnCall == nil {
		fake.createNrqlConditionStaticMutationReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlAlertCondition
			result2 error
		})
	}
	fake.createNrqlConditionStaticMutationReturnsOnCall[i] = struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreatePolicy(arg1 alerts.Policy) (*alerts.Policy, error) {
	fake.createPolicyMutex.Lock()
	ret, specificReturn := fake.createPolicyReturnsOnCall[len(fake.createPolicyArgsForCall)]
	fake.createPolicyArgsForCall = append(fake.createPolicyArgsForCall, struct {
		arg1 alerts.Policy
	}{arg1})
	fake.recordInvocation("CreatePolicy", []interface{}{arg1})
	fake.createPolicyMutex.Unlock()
	if fake.CreatePolicyStub != nil {
		return fake.CreatePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyCallCount() int {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	return len(fake.createPolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyCalls(stub func(alerts.Policy) (*alerts.Policy, error)) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyArgsForCall(i int) alerts.Policy {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	argsForCall := fake.createPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	fake.createPolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	if fake.createPolicyReturnsOnCall == nil {
		fake.createPolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.createPolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutation(arg1 int, arg2 alerts.AlertsPolicyInput) (*alerts.AlertsPolicy, error) {
	fake.createPolicyMutationMutex.Lock()
	ret, specificReturn := fake.createPolicyMutationReturnsOnCall[len(fake.createPolicyMutationArgsForCall)]
	fake.createPolicyMutationArgsForCall = append(fake.createPolicyMutationArgsForCall, struct {
		arg1 int
		arg2 alerts.AlertsPolicyInput
	}{arg1, arg2})
	fake.recordInvocation("CreatePolicyMutation", []interface{}{arg1, arg2})
	fake.createPolicyMutationMutex.Unlock()
	if fake.CreatePolicyMutationStub != nil {
		return fake.CreatePolicyMutationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutationCallCount() int {
	fake.createPolicyMutationMutex.RLock()
	defer fake.createPolicyMutationMutex.RUnlock()
	return len(fake.createPolicyMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutationCalls(stub func(int, alerts.AlertsPolicyInput) (*alerts.AlertsPolicy, error)) {
	fake.createPolicyMutationMutex.Lock()
	defer fake.createPolicyMutationMutex.Unlock()
	fake.CreatePolicyMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutationArgsForCall(i int) (int, alerts.AlertsPolicyInput) {
	fake.createPolicyMutationMutex.RLock()
	defer fake.createPolicyMutationMutex.RUnlock()
	argsForCall := fake.createPolicyMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutationReturns(result1 *alerts.AlertsPolicy, result2 error) {
	fake.createPolicyMutationMutex.Lock()
	defer fake.createPolicyMutationMutex.Unlock()
	fake.CreatePolicyMutationStub = nil
	fake.createPolicyMutationReturns = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutationReturnsOnCall(i int, result1 *alerts.AlertsPolicy, result2 error) {
	fake.createPolicyMutationMutex.Lock()
	defer fake.createPolicyMutationMutex.Unlock()
	fake.CreatePolicyMutationStub = nil
	if fake.createPolicyMutationReturnsOnCall == nil {
		fake.createPolicyMutationReturnsOnCall = make(map[int]struct {
			result1 *alerts.AlertsPolicy
			result2 error
		})
	}
	fake.createPolicyMutationReturnsOnCall[i] = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteChannel(arg1 int) (*alerts.Channel, error) {
	fake.deleteChannelMutex.Lock()
	ret, specificReturn := fake.deleteChannelReturnsOnCall[len(fake.deleteChannelArgsForCall)]
	fake.deleteChannelArgsForCall = append(fake.deleteChannelArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeleteChannel", []interface{}{arg1})
	fake.deleteChannelMutex.Unlock()
	if fake.DeleteChannelStub != nil {
		return fake.DeleteChannelStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteChannelReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeleteChannelCallCount() int {
	fake.deleteChannelMutex.RLock()
	defer fake.deleteChannelMutex.RUnlock()
	return len(fake.deleteChannelArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeleteChannelCalls(stub func(int) (*alerts.Channel, error)) {
	fake.deleteChannelMutex.Lock()
	defer fake.deleteChannelMutex.Unlock()
	fake.DeleteChannelStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeleteChannelArgsForCall(i int) int {
	fake.deleteChannelMutex.RLock()
	defer fake.deleteChannelMutex.RUnlock()
	argsForCall := fake.deleteChannelArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) DeleteChannelReturns(result1 *alerts.Channel, result2 error) {
	fake.deleteChannelMutex.Lock()
	defer fake.deleteChannelMutex.Unlock()
	fake.DeleteChannelStub = nil
	fake.deleteChannelReturns = struct {
		result1 *alerts.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteChannelReturnsOnCall(i int, result1 *alerts.Channel, result2 error) {
	fake.deleteChannelMutex.Lock()
	defer fake.deleteChannelMutex.Unlock()
	fake.DeleteChannelStub = nil
	if fake.deleteChannelReturnsOnCall == nil {
		fake.deleteChannelReturnsOnCall = make(map[int]struct {
			result1 *alerts.Channel
			result2 error
		})
	}
	fake.deleteChannelReturnsOnCall[i] = struct {
		result1 *alerts.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteCondition(arg1 int) (*alerts.Condition, error) {
	fake.deleteConditionMutex.Lock()
	ret, specificReturn := fake.deleteConditionReturnsOnCall[len(fake.deleteConditionArgsForCall)]
	fake.deleteConditionArgsForCall = append(fake.deleteConditionArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeleteCondition", []interface{}{arg1})
	fake.deleteConditionMutex.Unlock()
	if fake.DeleteConditionStub != nil {
		return fake.DeleteConditionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionCallCount() int {
	fake.deleteConditionMutex.RLock()
	defer fake.deleteConditionMutex.RUnlock()
	return len(fake.deleteConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionCalls(stub func(int) (*alerts.Condition, error)) {
	fake.deleteConditionMutex.Lock()
	defer fake.deleteConditionMutex.Unlock()
	fake.DeleteConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionArgsForCall(i int) int {
	fake.deleteConditionMutex.RLock()
	defer fake.deleteConditionMutex.RUnlock()
	argsForCall := fake.deleteConditionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionReturns(result1 *alerts.Condition, result2 error) {
	fake.deleteConditionMutex.Lock()
	defer fake.deleteConditionMutex.Unlock()
	fake.DeleteConditionStub = nil
	fake.deleteConditionReturns = struct {
		result1 *alerts.Condition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionReturnsOnCall(i int, result1 *alerts.Condition, result2 error) {
	fake.deleteConditionMutex.Lock()
	defer fake.deleteConditionMutex.Unlock()
	fake.DeleteConditionStub = nil
	if fake.deleteConditionReturnsOnCall == nil {
		fake.deleteConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.Condition
			result2 error
		})
	}
	fake.deleteConditionReturnsOnCall[i] = struct {
		result1 *alerts.Condition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionMutation(arg1 int, arg2 string) (string, error) {
	fake.deleteConditionMutationMutex.Lock()
	ret, specificReturn := fake.deleteConditionMutationReturnsOnCall[len(fake.deleteConditionMutationArgsForCall)]
	fake.deleteConditionMutationArgsForCall = append(fake.deleteConditionMutationArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DeleteConditionMutation", []interface{}{arg1, arg2})
	fake.deleteConditionMutationMutex.Unlock()
	if fake.DeleteConditionMutationStub != nil {
		return fake.DeleteConditionMutationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteConditionMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionMutationCallCount() int {
	fake.deleteConditionMutationMutex.RLock()
	defer fake.deleteConditionMutationMutex.RUnlock()
	return len(fake.deleteConditionMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionMutationCalls(stub func(int, string) (string, error)) {
	fake.deleteConditionMutationMutex.Lock()
	defer fake.deleteConditionMutationMutex.Unlock()
	fake.DeleteConditionMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionMutationArgsForCall(i int) (int, string) {
	fake.deleteConditionMutationMutex.RLock()
	defer fake.deleteConditionMutationMutex.RUnlock()
	argsForCall := fake.deleteConditionMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionMutationReturns(result1 string, result2 error) {
	fake.deleteConditionMutationMutex.Lock()
	defer fake.deleteConditionMutationMutex.Unlock()
	fake.DeleteConditionMutationStub = nil
	fake.deleteConditionMutationReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteConditionMutationReturnsOnCall(i int, result1 string, result2 error) {
	fake.deleteConditionMutationMutex.Lock()
	defer fake.deleteConditionMutationMutex.Unlock()
	fake.DeleteConditionMutationStub = nil
	if fake.deleteConditionMutationReturnsOnCall == nil {
		fake.deleteConditionMutationReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.deleteConditionMutationReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlCondition(arg1 int) (*alerts.NrqlCondition, error) {
	fake.deleteNrqlConditionMutex.Lock()
	ret, specificReturn := fake.deleteNrqlConditionReturnsOnCall[len(fake.deleteNrqlConditionArgsForCall)]
	fake.deleteNrqlConditionArgsForCall = append(fake.deleteNrqlConditionArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeleteNrqlCondition", []interface{}{arg1})
	fake.deleteNrqlConditionMutex.Unlock()
	if fake.DeleteNrqlConditionStub != nil {
		return fake.DeleteNrqlConditionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNrqlConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionCallCount() int {
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	return len(fake.deleteNrqlConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionCalls(stub func(int) (*alerts.NrqlCondition, error)) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionArgsForCall(i int) int {
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	argsForCall := fake.deleteNrqlConditionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionReturns(result1 *alerts.NrqlCondition, result2 error) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = nil
	fake.deleteNrqlConditionReturns = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionReturnsOnCall(i int, result1 *alerts.NrqlCondition, result2 error) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = nil
	if fake.deleteNrqlConditionReturnsOnCall == nil {
		fake.deleteNrqlConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlCondition
			result2 error
		})
	}
	fake.deleteNrqlConditionReturnsOnCall[i] = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicy(arg1 int) (*alerts.Policy, error) {
	fake.deletePolicyMutex.Lock()
	ret, specificReturn := fake.deletePolicyReturnsOnCall[len(fake.deletePolicyArgsForCall)]
	fake.deletePolicyArgsForCall = append(fake.deletePolicyArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeletePolicy", []interface{}{arg1})
	fake.deletePolicyMutex.Unlock()
	if fake.DeletePolicyStub != nil {
		return fake.DeletePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyCallCount() int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	return len(fake.deletePolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyCalls(stub func(int) (*alerts.Policy, error)) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyArgsForCall(i int) int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	argsForCall := fake.deletePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	fake.deletePolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	if fake.deletePolicyReturnsOnCall == nil {
		fake.deletePolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.deletePolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyChannel(arg1 int, arg2 int) (*alerts.Channel, error) {
	fake.deletePolicyChannelMutex.Lock()
	ret, specificReturn := fake.deletePolicyChannelReturnsOnCall[len(fake.deletePolicyChannelArgsForCall)]
	fake.deletePolicyChannelArgsForCall = append(fake.deletePolicyChannelArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("DeletePolicyChannel", []interface{}{arg1, arg2})
	fake.deletePolicyChannelMutex.Unlock()
	if fake.DeletePolicyChannelStub != nil {
		return fake.DeletePolicyChannelStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyChannelReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyChannelCallCount() int {
	fake.deletePolicyChannelMutex.RLock()
	defer fake.deletePolicyChannelMutex.RUnlock()
	return len(fake.deletePolicyChannelArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyChannelCalls(stub func(int, int) (*alerts.Channel, error)) {
	fake.deletePolicyChannelMutex.Lock()
	defer fake.deletePolicyChannelMutex.Unlock()
	fake.DeletePolicyChannelStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyChannelArgsForCall(i int) (int, int) {
	fake.deletePolicyChannelMutex.RLock()
	defer fake.deletePolicyChannelMutex.RUnlock()
	argsForCall := fake.deletePolicyChannelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyChannelReturns(result1 *alerts.Channel, result2 error) {
	fake.deletePolicyChannelMutex.Lock()
	defer fake.deletePolicyChannelMutex.Unlock()
	fake.DeletePolicyChannelStub = nil
	fake.deletePolicyChannelReturns = struct {
		result1 *alerts.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyChannelReturnsOnCall(i int, result1 *alerts.Channel, result2 error) {
	fake.deletePolicyChannelMutex.Lock()
	defer fake.deletePolicyChannelMutex.Unlock()
	fake.DeletePolicyChannelStub = nil
	if fake.deletePolicyChannelReturnsOnCall == nil {
		fake.deletePolicyChannelReturnsOnCall = make(map[int]struct {
			result1 *alerts.Channel
			result2 error
		})
	}
	fake.deletePolicyChannelReturnsOnCall[i] = struct {
		result1 *alerts.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutation(arg1 int, arg2 string) (*alerts.AlertsPolicy, error) {
	fake.deletePolicyMutationMutex.Lock()
	ret, specificReturn := fake.deletePolicyMutationReturnsOnCall[len(fake.deletePolicyMutationArgsForCall)]
	fake.deletePolicyMutationArgsForCall = append(fake.deletePolicyMutationArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DeletePolicyMutation", []interface{}{arg1, arg2})
	fake.deletePolicyMutationMutex.Unlock()
	if fake.DeletePolicyMutationStub != nil {
		return fake.DeletePolicyMutationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutationCallCount() int {
	fake.deletePolicyMutationMutex.RLock()
	defer fake.deletePolicyMutationMutex.RUnlock()
	return len(fake.deletePolicyMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutationCalls(stub func(int, string) (*alerts.AlertsPolicy, error)) {
	fake.deletePolicyMutationMutex.Lock()
	defer fake.deletePolicyMutationMutex.Unlock()
	fake.DeletePolicyMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutationArgsForCall(i int) (int, string) {
	fake.deletePolicyMutationMutex.RLock()
	defer fake.deletePolicyMutationMutex.RUnlock()
	argsForCall := fake.deletePolicyMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutationReturns(result1 *alerts.AlertsPolicy, result2 error) {
	fake.deletePolicyMutationMutex.Lock()
	defer fake.deletePolicyMutationMutex.Unlock()
	fake.DeletePolicyMutationStub = nil
	fake.deletePolicyMutationReturns = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutationReturnsOnCall(i int, result1 *alerts.AlertsPolicy, result2 error) {
	fake.deletePolicyMutationMutex.Lock()
	defer fake.deletePolicyMutationMutex.Unlock()
	fake.DeletePolicyMutationStub = nil
	if fake.deletePolicyMutationReturnsOnCall == nil {
		fake.deletePolicyMutationReturnsOnCall = make(map[int]struct {
			result1 *alerts.AlertsPolicy
			result2 error
		})
	}
	fake.deletePolicyMutationReturnsOnCall[i] = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) GetNrqlConditionQuery(arg1 int, arg2 string) (*alerts.NrqlAlertCondition, error) {
	fake.getNrqlConditionQueryMutex.Lock()
	ret, specificReturn := fake.getNrqlConditionQueryReturnsOnCall[len(fake.getNrqlConditionQueryArgsForCall)]
	fake.getNrqlConditionQueryArgsForCall = append(fake.getNrqlConditionQueryArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetNrqlConditionQuery", []interface{}{arg1, arg2})
	fake.getNrqlConditionQueryMutex.Unlock()
	if fake.GetNrqlConditionQueryStub != nil {
		return fake.GetNrqlConditionQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getNrqlConditionQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) GetNrqlConditionQueryCallCount() int {
	fake.getNrqlConditionQueryMutex.RLock()
	defer fake.getNrqlConditionQueryMutex.RUnlock()
	return len(fake.getNrqlConditionQueryArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) GetNrqlConditionQueryCalls(stub func(int, string) (*alerts.NrqlAlertCondition, error)) {
	fake.getNrqlConditionQueryMutex.Lock()
	defer fake.getNrqlConditionQueryMutex.Unlock()
	fake.GetNrqlConditionQueryStub = stub
}

func (fake *FakeNewRelicAlertsClient) GetNrqlConditionQueryArgsForCall(i int) (int, string) {
	fake.getNrqlConditionQueryMutex.RLock()
	defer fake.getNrqlConditionQueryMutex.RUnlock()
	argsForCall := fake.getNrqlConditionQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) GetNrqlConditionQueryReturns(result1 *alerts.NrqlAlertCondition, result2 error) {
	fake.getNrqlConditionQueryMutex.Lock()
	defer fake.getNrqlConditionQueryMutex.Unlock()
	fake.GetNrqlConditionQueryStub = nil
	fake.getNrqlConditionQueryReturns = struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) GetNrqlConditionQueryReturnsOnCall(i int, result1 *alerts.NrqlAlertCondition, result2 error) {
	fake.getNrqlConditionQueryMutex.Lock()
	defer fake.getNrqlConditionQueryMutex.Unlock()
	fake.GetNrqlConditionQueryStub = nil
	if fake.getNrqlConditionQueryReturnsOnCall == nil {
		fake.getNrqlConditionQueryReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlAlertCondition
			result2 error
		})
	}
	fake.getNrqlConditionQueryReturnsOnCall[i] = struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) GetPolicy(arg1 int) (*alerts.Policy, error) {
	fake.getPolicyMutex.Lock()
	ret, specificReturn := fake.getPolicyReturnsOnCall[len(fake.getPolicyArgsForCall)]
	fake.getPolicyArgsForCall = append(fake.getPolicyArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetPolicy", []interface{}{arg1})
	fake.getPolicyMutex.Unlock()
	if fake.GetPolicyStub != nil {
		return fake.GetPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) GetPolicyCallCount() int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	return len(fake.getPolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) GetPolicyCalls(stub func(int) (*alerts.Policy, error)) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) GetPolicyArgsForCall(i int) int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	argsForCall := fake.getPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) GetPolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	fake.getPolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) GetPolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	if fake.getPolicyReturnsOnCall == nil {
		fake.getPolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.getPolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListChannels() ([]*alerts.Channel, error) {
	fake.listChannelsMutex.Lock()
	ret, specificReturn := fake.listChannelsReturnsOnCall[len(fake.listChannelsArgsForCall)]
	fake.listChannelsArgsForCall = append(fake.listChannelsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListChannels", []interface{}{})
	fake.listChannelsMutex.Unlock()
	if fake.ListChannelsStub != nil {
		return fake.ListChannelsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listChannelsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) ListChannelsCallCount() int {
	fake.listChannelsMutex.RLock()
	defer fake.listChannelsMutex.RUnlock()
	return len(fake.listChannelsArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) ListChannelsCalls(stub func() ([]*alerts.Channel, error)) {
	fake.listChannelsMutex.Lock()
	defer fake.listChannelsMutex.Unlock()
	fake.ListChannelsStub = stub
}

func (fake *FakeNewRelicAlertsClient) ListChannelsReturns(result1 []*alerts.Channel, result2 error) {
	fake.listChannelsMutex.Lock()
	defer fake.listChannelsMutex.Unlock()
	fake.ListChannelsStub = nil
	fake.listChannelsReturns = struct {
		result1 []*alerts.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListChannelsReturnsOnCall(i int, result1 []*alerts.Channel, result2 error) {
	fake.listChannelsMutex.Lock()
	defer fake.listChannelsMutex.Unlock()
	fake.ListChannelsStub = nil
	if fake.listChannelsReturnsOnCall == nil {
		fake.listChannelsReturnsOnCall = make(map[int]struct {
			result1 []*alerts.Channel
			result2 error
		})
	}
	fake.listChannelsReturnsOnCall[i] = struct {
		result1 []*alerts.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListConditions(arg1 int) ([]*alerts.Condition, error) {
	fake.listConditionsMutex.Lock()
	ret, specificReturn := fake.listConditionsReturnsOnCall[len(fake.listConditionsArgsForCall)]
	fake.listConditionsArgsForCall = append(fake.listConditionsArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ListConditions", []interface{}{arg1})
	fake.listConditionsMutex.Unlock()
	if fake.ListConditionsStub != nil {
		return fake.ListConditionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listConditionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) ListConditionsCallCount() int {
	fake.listConditionsMutex.RLock()
	defer fake.listConditionsMutex.RUnlock()
	return len(fake.listConditionsArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) ListConditionsCalls(stub func(int) ([]*alerts.Condition, error)) {
	fake.listConditionsMutex.Lock()
	defer fake.listConditionsMutex.Unlock()
	fake.ListConditionsStub = stub
}

func (fake *FakeNewRelicAlertsClient) ListConditionsArgsForCall(i int) int {
	fake.listConditionsMutex.RLock()
	defer fake.listConditionsMutex.RUnlock()
	argsForCall := fake.listConditionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) ListConditionsReturns(result1 []*alerts.Condition, result2 error) {
	fake.listConditionsMutex.Lock()
	defer fake.listConditionsMutex.Unlock()
	fake.ListConditionsStub = nil
	fake.listConditionsReturns = struct {
		result1 []*alerts.Condition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListConditionsReturnsOnCall(i int, result1 []*alerts.Condition, result2 error) {
	fake.listConditionsMutex.Lock()
	defer fake.listConditionsMutex.Unlock()
	fake.ListConditionsStub = nil
	if fake.listConditionsReturnsOnCall == nil {
		fake.listConditionsReturnsOnCall = make(map[int]struct {
			result1 []*alerts.Condition
			result2 error
		})
	}
	fake.listConditionsReturnsOnCall[i] = struct {
		result1 []*alerts.Condition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditions(arg1 int) ([]*alerts.NrqlCondition, error) {
	fake.listNrqlConditionsMutex.Lock()
	ret, specificReturn := fake.listNrqlConditionsReturnsOnCall[len(fake.listNrqlConditionsArgsForCall)]
	fake.listNrqlConditionsArgsForCall = append(fake.listNrqlConditionsArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ListNrqlConditions", []interface{}{arg1})
	fake.listNrqlConditionsMutex.Unlock()
	if fake.ListNrqlConditionsStub != nil {
		return fake.ListNrqlConditionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listNrqlConditionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsCallCount() int {
	fake.listNrqlConditionsMutex.RLock()
	defer fake.listNrqlConditionsMutex.RUnlock()
	return len(fake.listNrqlConditionsArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsCalls(stub func(int) ([]*alerts.NrqlCondition, error)) {
	fake.listNrqlConditionsMutex.Lock()
	defer fake.listNrqlConditionsMutex.Unlock()
	fake.ListNrqlConditionsStub = stub
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsArgsForCall(i int) int {
	fake.listNrqlConditionsMutex.RLock()
	defer fake.listNrqlConditionsMutex.RUnlock()
	argsForCall := fake.listNrqlConditionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsReturns(result1 []*alerts.NrqlCondition, result2 error) {
	fake.listNrqlConditionsMutex.Lock()
	defer fake.listNrqlConditionsMutex.Unlock()
	fake.ListNrqlConditionsStub = nil
	fake.listNrqlConditionsReturns = struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsReturnsOnCall(i int, result1 []*alerts.NrqlCondition, result2 error) {
	fake.listNrqlConditionsMutex.Lock()
	defer fake.listNrqlConditionsMutex.Unlock()
	fake.ListNrqlConditionsStub = nil
	if fake.listNrqlConditionsReturnsOnCall == nil {
		fake.listNrqlConditionsReturnsOnCall = make(map[int]struct {
			result1 []*alerts.NrqlCondition
			result2 error
		})
	}
	fake.listNrqlConditionsReturnsOnCall[i] = struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListPolicies(arg1 *alerts.ListPoliciesParams) ([]alerts.Policy, error) {
	fake.listPoliciesMutex.Lock()
	ret, specificReturn := fake.listPoliciesReturnsOnCall[len(fake.listPoliciesArgsForCall)]
	fake.listPoliciesArgsForCall = append(fake.listPoliciesArgsForCall, struct {
		arg1 *alerts.ListPoliciesParams
	}{arg1})
	fake.recordInvocation("ListPolicies", []interface{}{arg1})
	fake.listPoliciesMutex.Unlock()
	if fake.ListPoliciesStub != nil {
		return fake.ListPoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesCallCount() int {
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	return len(fake.listPoliciesArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesCalls(stub func(*alerts.ListPoliciesParams) ([]alerts.Policy, error)) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = stub
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesArgsForCall(i int) *alerts.ListPoliciesParams {
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	argsForCall := fake.listPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesReturns(result1 []alerts.Policy, result2 error) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = nil
	fake.listPoliciesReturns = struct {
		result1 []alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesReturnsOnCall(i int, result1 []alerts.Policy, result2 error) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = nil
	if fake.listPoliciesReturnsOnCall == nil {
		fake.listPoliciesReturnsOnCall = make(map[int]struct {
			result1 []alerts.Policy
			result2 error
		})
	}
	fake.listPoliciesReturnsOnCall[i] = struct {
		result1 []alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) QueryPolicy(arg1 int, arg2 string) (*alerts.AlertsPolicy, error) {
	fake.queryPolicyMutex.Lock()
	ret, specificReturn := fake.queryPolicyReturnsOnCall[len(fake.queryPolicyArgsForCall)]
	fake.queryPolicyArgsForCall = append(fake.queryPolicyArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("QueryPolicy", []interface{}{arg1, arg2})
	fake.queryPolicyMutex.Unlock()
	if fake.QueryPolicyStub != nil {
		return fake.QueryPolicyStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) QueryPolicyCallCount() int {
	fake.queryPolicyMutex.RLock()
	defer fake.queryPolicyMutex.RUnlock()
	return len(fake.queryPolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) QueryPolicyCalls(stub func(int, string) (*alerts.AlertsPolicy, error)) {
	fake.queryPolicyMutex.Lock()
	defer fake.queryPolicyMutex.Unlock()
	fake.QueryPolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) QueryPolicyArgsForCall(i int) (int, string) {
	fake.queryPolicyMutex.RLock()
	defer fake.queryPolicyMutex.RUnlock()
	argsForCall := fake.queryPolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) QueryPolicyReturns(result1 *alerts.AlertsPolicy, result2 error) {
	fake.queryPolicyMutex.Lock()
	defer fake.queryPolicyMutex.Unlock()
	fake.QueryPolicyStub = nil
	fake.queryPolicyReturns = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) QueryPolicyReturnsOnCall(i int, result1 *alerts.AlertsPolicy, result2 error) {
	fake.queryPolicyMutex.Lock()
	defer fake.queryPolicyMutex.Unlock()
	fake.QueryPolicyStub = nil
	if fake.queryPolicyReturnsOnCall == nil {
		fake.queryPolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.AlertsPolicy
			result2 error
		})
	}
	fake.queryPolicyReturnsOnCall[i] = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearch(arg1 int, arg2 alerts.AlertsPoliciesSearchCriteriaInput) ([]*alerts.AlertsPolicy, error) {
	fake.queryPolicySearchMutex.Lock()
	ret, specificReturn := fake.queryPolicySearchReturnsOnCall[len(fake.queryPolicySearchArgsForCall)]
	fake.queryPolicySearchArgsForCall = append(fake.queryPolicySearchArgsForCall, struct {
		arg1 int
		arg2 alerts.AlertsPoliciesSearchCriteriaInput
	}{arg1, arg2})
	fake.recordInvocation("QueryPolicySearch", []interface{}{arg1, arg2})
	fake.queryPolicySearchMutex.Unlock()
	if fake.QueryPolicySearchStub != nil {
		return fake.QueryPolicySearchStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryPolicySearchReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearchCallCount() int {
	fake.queryPolicySearchMutex.RLock()
	defer fake.queryPolicySearchMutex.RUnlock()
	return len(fake.queryPolicySearchArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearchCalls(stub func(int, alerts.AlertsPoliciesSearchCriteriaInput) ([]*alerts.AlertsPolicy, error)) {
	fake.queryPolicySearchMutex.Lock()
	defer fake.queryPolicySearchMutex.Unlock()
	fake.QueryPolicySearchStub = stub
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearchArgsForCall(i int) (int, alerts.AlertsPoliciesSearchCriteriaInput) {
	fake.queryPolicySearchMutex.RLock()
	defer fake.queryPolicySearchMutex.RUnlock()
	argsForCall := fake.queryPolicySearchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearchReturns(result1 []*alerts.AlertsPolicy, result2 error) {
	fake.queryPolicySearchMutex.Lock()
	defer fake.queryPolicySearchMutex.Unlock()
	fake.QueryPolicySearchStub = nil
	fake.queryPolicySearchReturns = struct {
		result1 []*alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearchReturnsOnCall(i int, result1 []*alerts.AlertsPolicy, result2 error) {
	fake.queryPolicySearchMutex.Lock()
	defer fake.queryPolicySearchMutex.Unlock()
	fake.QueryPolicySearchStub = nil
	if fake.queryPolicySearchReturnsOnCall == nil {
		fake.queryPolicySearchReturnsOnCall = make(map[int]struct {
			result1 []*alerts.AlertsPolicy
			result2 error
		})
	}
	fake.queryPolicySearchReturnsOnCall[i] = struct {
		result1 []*alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQuery(arg1 int, arg2 alerts.NrqlConditionsSearchCriteria) ([]*alerts.NrqlAlertCondition, error) {
	fake.searchNrqlConditionsQueryMutex.Lock()
	ret, specificReturn := fake.searchNrqlConditionsQueryReturnsOnCall[len(fake.searchNrqlConditionsQueryArgsForCall)]
	fake.searchNrqlConditionsQueryArgsForCall = append(fake.searchNrqlConditionsQueryArgsForCall, struct {
		arg1 int
		arg2 alerts.NrqlConditionsSearchCriteria
	}{arg1, arg2})
	fake.recordInvocation("SearchNrqlConditionsQuery", []interface{}{arg1, arg2})
	fake.searchNrqlConditionsQueryMutex.Unlock()
	if fake.SearchNrqlConditionsQueryStub != nil {
		return fake.SearchNrqlConditionsQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.searchNrqlConditionsQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQueryCallCount() int {
	fake.searchNrqlConditionsQueryMutex.RLock()
	defer fake.searchNrqlConditionsQueryMutex.RUnlock()
	return len(fake.searchNrqlConditionsQueryArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQueryCalls(stub func(int, alerts.NrqlConditionsSearchCriteria) ([]*alerts.NrqlAlertCondition, error)) {
	fake.searchNrqlConditionsQueryMutex.Lock()
	defer fake.searchNrqlConditionsQueryMutex.Unlock()
	fake.SearchNrqlConditionsQueryStub = stub
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQueryArgsForCall(i int) (int, alerts.NrqlConditionsSearchCriteria) {
	fake.searchNrqlConditionsQueryMutex.RLock()
	defer fake.searchNrqlConditionsQueryMutex.RUnlock()
	argsForCall := fake.searchNrqlConditionsQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQueryReturns(result1 []*alerts.NrqlAlertCondition, result2 error) {
	fake.searchNrqlConditionsQueryMutex.Lock()
	defer fake.searchNrqlConditionsQueryMutex.Unlock()
	fake.SearchNrqlConditionsQueryStub = nil
	fake.searchNrqlConditionsQueryReturns = struct {
		result1 []*alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQueryReturnsOnCall(i int, result1 []*alerts.NrqlAlertCondition, result2 error) {
	fake.searchNrqlConditionsQueryMutex.Lock()
	defer fake.searchNrqlConditionsQueryMutex.Unlock()
	fake.SearchNrqlConditionsQueryStub = nil
	if fake.searchNrqlConditionsQueryReturnsOnCall == nil {
		fake.searchNrqlConditionsQueryReturnsOnCall = make(map[int]struct {
			result1 []*alerts.NrqlAlertCondition
			result2 error
		})
	}
	fake.searchNrqlConditionsQueryReturnsOnCall[i] = struct {
		result1 []*alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateCondition(arg1 alerts.Condition) (*alerts.Condition, error) {
	fake.updateConditionMutex.Lock()
	ret, specificReturn := fake.updateConditionReturnsOnCall[len(fake.updateConditionArgsForCall)]
	fake.updateConditionArgsForCall = append(fake.updateConditionArgsForCall, struct {
		arg1 alerts.Condition
	}{arg1})
	fake.recordInvocation("UpdateCondition", []interface{}{arg1})
	fake.updateConditionMutex.Unlock()
	if fake.UpdateConditionStub != nil {
		return fake.UpdateConditionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdateConditionCallCount() int {
	fake.updateConditionMutex.RLock()
	defer fake.updateConditionMutex.RUnlock()
	return len(fake.updateConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdateConditionCalls(stub func(alerts.Condition) (*alerts.Condition, error)) {
	fake.updateConditionMutex.Lock()
	defer fake.updateConditionMutex.Unlock()
	fake.UpdateConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdateConditionArgsForCall(i int) alerts.Condition {
	fake.updateConditionMutex.RLock()
	defer fake.updateConditionMutex.RUnlock()
	argsForCall := fake.updateConditionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) UpdateConditionReturns(result1 *alerts.Condition, result2 error) {
	fake.updateConditionMutex.Lock()
	defer fake.updateConditionMutex.Unlock()
	fake.UpdateConditionStub = nil
	fake.updateConditionReturns = struct {
		result1 *alerts.Condition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateConditionReturnsOnCall(i int, result1 *alerts.Condition, result2 error) {
	fake.updateConditionMutex.Lock()
	defer fake.updateConditionMutex.Unlock()
	fake.UpdateConditionStub = nil
	if fake.updateConditionReturnsOnCall == nil {
		fake.updateConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.Condition
			result2 error
		})
	}
	fake.updateConditionReturnsOnCall[i] = struct {
		result1 *alerts.Condition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlCondition(arg1 alerts.NrqlCondition) (*alerts.NrqlCondition, error) {
	fake.updateNrqlConditionMutex.Lock()
	ret, specificReturn := fake.updateNrqlConditionReturnsOnCall[len(fake.updateNrqlConditionArgsForCall)]
	fake.updateNrqlConditionArgsForCall = append(fake.updateNrqlConditionArgsForCall, struct {
		arg1 alerts.NrqlCondition
	}{arg1})
	fake.recordInvocation("UpdateNrqlCondition", []interface{}{arg1})
	fake.updateNrqlConditionMutex.Unlock()
	if fake.UpdateNrqlConditionStub != nil {
		return fake.UpdateNrqlConditionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateNrqlConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionCallCount() int {
	fake.updateNrqlConditionMutex.RLock()
	defer fake.updateNrqlConditionMutex.RUnlock()
	return len(fake.updateNrqlConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionCalls(stub func(alerts.NrqlCondition) (*alerts.NrqlCondition, error)) {
	fake.updateNrqlConditionMutex.Lock()
	defer fake.updateNrqlConditionMutex.Unlock()
	fake.UpdateNrqlConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionArgsForCall(i int) alerts.NrqlCondition {
	fake.updateNrqlConditionMutex.RLock()
	defer fake.updateNrqlConditionMutex.RUnlock()
	argsForCall := fake.updateNrqlConditionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionReturns(result1 *alerts.NrqlCondition, result2 error) {
	fake.updateNrqlConditionMutex.Lock()
	defer fake.updateNrqlConditionMutex.Unlock()
	fake.UpdateNrqlConditionStub = nil
	fake.updateNrqlConditionReturns = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionReturnsOnCall(i int, result1 *alerts.NrqlCondition, result2 error) {
	fake.updateNrqlConditionMutex.Lock()
	defer fake.updateNrqlConditionMutex.Unlock()
	fake.UpdateNrqlConditionStub = nil
	if fake.updateNrqlConditionReturnsOnCall == nil {
		fake.updateNrqlConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlCondition
			result2 error
		})
	}
	fake.updateNrqlConditionReturnsOnCall[i] = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutation(arg1 int, arg2 string, arg3 alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error) {
	fake.updateNrqlConditionStaticMutationMutex.Lock()
	ret, specificReturn := fake.updateNrqlConditionStaticMutationReturnsOnCall[len(fake.updateNrqlConditionStaticMutationArgsForCall)]
	fake.updateNrqlConditionStaticMutationArgsForCall = append(fake.updateNrqlConditionStaticMutationArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 alerts.NrqlConditionInput
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateNrqlConditionStaticMutation", []interface{}{arg1, arg2, arg3})
	fake.updateNrqlConditionStaticMutationMutex.Unlock()
	if fake.UpdateNrqlConditionStaticMutationStub != nil {
		return fake.UpdateNrqlConditionStaticMutationStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateNrqlConditionStaticMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutationCallCount() int {
	fake.updateNrqlConditionStaticMutationMutex.RLock()
	defer fake.updateNrqlConditionStaticMutationMutex.RUnlock()
	return len(fake.updateNrqlConditionStaticMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutationCalls(stub func(int, string, alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error)) {
	fake.updateNrqlConditionStaticMutationMutex.Lock()
	defer fake.updateNrqlConditionStaticMutationMutex.Unlock()
	fake.UpdateNrqlConditionStaticMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutationArgsForCall(i int) (int, string, alerts.NrqlConditionInput) {
	fake.updateNrqlConditionStaticMutationMutex.RLock()
	defer fake.updateNrqlConditionStaticMutationMutex.RUnlock()
	argsForCall := fake.updateNrqlConditionStaticMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutationReturns(result1 *alerts.NrqlAlertCondition, result2 error) {
	fake.updateNrqlConditionStaticMutationMutex.Lock()
	defer fake.updateNrqlConditionStaticMutationMutex.Unlock()
	fake.UpdateNrqlConditionStaticMutationStub = nil
	fake.updateNrqlConditionStaticMutationReturns = struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutationReturnsOnCall(i int, result1 *alerts.NrqlAlertCondition, result2 error) {
	fake.updateNrqlConditionStaticMutationMutex.Lock()
	defer fake.updateNrqlConditionStaticMutationMutex.Unlock()
	fake.UpdateNrqlConditionStaticMutationStub = nil
	if fake.updateNrqlConditionStaticMutationReturnsOnCall == nil {
		fake.updateNrqlConditionStaticMutationReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlAlertCondition
			result2 error
		})
	}
	fake.updateNrqlConditionStaticMutationReturnsOnCall[i] = struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicy(arg1 alerts.Policy) (*alerts.Policy, error) {
	fake.updatePolicyMutex.Lock()
	ret, specificReturn := fake.updatePolicyReturnsOnCall[len(fake.updatePolicyArgsForCall)]
	fake.updatePolicyArgsForCall = append(fake.updatePolicyArgsForCall, struct {
		arg1 alerts.Policy
	}{arg1})
	fake.recordInvocation("UpdatePolicy", []interface{}{arg1})
	fake.updatePolicyMutex.Unlock()
	if fake.UpdatePolicyStub != nil {
		return fake.UpdatePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updatePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyCallCount() int {
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	return len(fake.updatePolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyCalls(stub func(alerts.Policy) (*alerts.Policy, error)) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyArgsForCall(i int) alerts.Policy {
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	argsForCall := fake.updatePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = nil
	fake.updatePolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = nil
	if fake.updatePolicyReturnsOnCall == nil {
		fake.updatePolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.updatePolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyChannels(arg1 int, arg2 []int) (*alerts.PolicyChannels, error) {
	var arg2Copy []int
	if arg2 != nil {
		arg2Copy = make([]int, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.updatePolicyChannelsMutex.Lock()
	ret, specificReturn := fake.updatePolicyChannelsReturnsOnCall[len(fake.updatePolicyChannelsArgsForCall)]
	fake.updatePolicyChannelsArgsForCall = append(fake.updatePolicyChannelsArgsForCall, struct {
		arg1 int
		arg2 []int
	}{arg1, arg2Copy})
	fake.recordInvocation("UpdatePolicyChannels", []interface{}{arg1, arg2Copy})
	fake.updatePolicyChannelsMutex.Unlock()
	if fake.UpdatePolicyChannelsStub != nil {
		return fake.UpdatePolicyChannelsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updatePolicyChannelsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyChannelsCallCount() int {
	fake.updatePolicyChannelsMutex.RLock()
	defer fake.updatePolicyChannelsMutex.RUnlock()
	return len(fake.updatePolicyChannelsArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyChannelsCalls(stub func(int, []int) (*alerts.PolicyChannels, error)) {
	fake.updatePolicyChannelsMutex.Lock()
	defer fake.updatePolicyChannelsMutex.Unlock()
	fake.UpdatePolicyChannelsStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyChannelsArgsForCall(i int) (int, []int) {
	fake.updatePolicyChannelsMutex.RLock()
	defer fake.updatePolicyChannelsMutex.RUnlock()
	argsForCall := fake.updatePolicyChannelsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyChannelsReturns(result1 *alerts.PolicyChannels, result2 error) {
	fake.updatePolicyChannelsMutex.Lock()
	defer fake.updatePolicyChannelsMutex.Unlock()
	fake.UpdatePolicyChannelsStub = nil
	fake.updatePolicyChannelsReturns = struct {
		result1 *alerts.PolicyChannels
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyChannelsReturnsOnCall(i int, result1 *alerts.PolicyChannels, result2 error) {
	fake.updatePolicyChannelsMutex.Lock()
	defer fake.updatePolicyChannelsMutex.Unlock()
	fake.UpdatePolicyChannelsStub = nil
	if fake.updatePolicyChannelsReturnsOnCall == nil {
		fake.updatePolicyChannelsReturnsOnCall = make(map[int]struct {
			result1 *alerts.PolicyChannels
			result2 error
		})
	}
	fake.updatePolicyChannelsReturnsOnCall[i] = struct {
		result1 *alerts.PolicyChannels
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutation(arg1 int, arg2 string, arg3 alerts.AlertsPolicyUpdateInput) (*alerts.AlertsPolicy, error) {
	fake.updatePolicyMutationMutex.Lock()
	ret, specificReturn := fake.updatePolicyMutationReturnsOnCall[len(fake.updatePolicyMutationArgsForCall)]
	fake.updatePolicyMutationArgsForCall = append(fake.updatePolicyMutationArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 alerts.AlertsPolicyUpdateInput
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdatePolicyMutation", []interface{}{arg1, arg2, arg3})
	fake.updatePolicyMutationMutex.Unlock()
	if fake.UpdatePolicyMutationStub != nil {
		return fake.UpdatePolicyMutationStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updatePolicyMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutationCallCount() int {
	fake.updatePolicyMutationMutex.RLock()
	defer fake.updatePolicyMutationMutex.RUnlock()
	return len(fake.updatePolicyMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutationCalls(stub func(int, string, alerts.AlertsPolicyUpdateInput) (*alerts.AlertsPolicy, error)) {
	fake.updatePolicyMutationMutex.Lock()
	defer fake.updatePolicyMutationMutex.Unlock()
	fake.UpdatePolicyMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutationArgsForCall(i int) (int, string, alerts.AlertsPolicyUpdateInput) {
	fake.updatePolicyMutationMutex.RLock()
	defer fake.updatePolicyMutationMutex.RUnlock()
	argsForCall := fake.updatePolicyMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutationReturns(result1 *alerts.AlertsPolicy, result2 error) {
	fake.updatePolicyMutationMutex.Lock()
	defer fake.updatePolicyMutationMutex.Unlock()
	fake.UpdatePolicyMutationStub = nil
	fake.updatePolicyMutationReturns = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutationReturnsOnCall(i int, result1 *alerts.AlertsPolicy, result2 error) {
	fake.updatePolicyMutationMutex.Lock()
	defer fake.updatePolicyMutationMutex.Unlock()
	fake.UpdatePolicyMutationStub = nil
	if fake.updatePolicyMutationReturnsOnCall == nil {
		fake.updatePolicyMutationReturnsOnCall = make(map[int]struct {
			result1 *alerts.AlertsPolicy
			result2 error
		})
	}
	fake.updatePolicyMutationReturnsOnCall[i] = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createChannelMutex.RLock()
	defer fake.createChannelMutex.RUnlock()
	fake.createConditionMutex.RLock()
	defer fake.createConditionMutex.RUnlock()
	fake.createNrqlConditionMutex.RLock()
	defer fake.createNrqlConditionMutex.RUnlock()
	fake.createNrqlConditionStaticMutationMutex.RLock()
	defer fake.createNrqlConditionStaticMutationMutex.RUnlock()
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	fake.createPolicyMutationMutex.RLock()
	defer fake.createPolicyMutationMutex.RUnlock()
	fake.deleteChannelMutex.RLock()
	defer fake.deleteChannelMutex.RUnlock()
	fake.deleteConditionMutex.RLock()
	defer fake.deleteConditionMutex.RUnlock()
	fake.deleteConditionMutationMutex.RLock()
	defer fake.deleteConditionMutationMutex.RUnlock()
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	fake.deletePolicyChannelMutex.RLock()
	defer fake.deletePolicyChannelMutex.RUnlock()
	fake.deletePolicyMutationMutex.RLock()
	defer fake.deletePolicyMutationMutex.RUnlock()
	fake.getNrqlConditionQueryMutex.RLock()
	defer fake.getNrqlConditionQueryMutex.RUnlock()
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	fake.listChannelsMutex.RLock()
	defer fake.listChannelsMutex.RUnlock()
	fake.listConditionsMutex.RLock()
	defer fake.listConditionsMutex.RUnlock()
	fake.listNrqlConditionsMutex.RLock()
	defer fake.listNrqlConditionsMutex.RUnlock()
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	fake.queryPolicyMutex.RLock()
	defer fake.queryPolicyMutex.RUnlock()
	fake.queryPolicySearchMutex.RLock()
	defer fake.queryPolicySearchMutex.RUnlock()
	fake.searchNrqlConditionsQueryMutex.RLock()
	defer fake.searchNrqlConditionsQueryMutex.RUnlock()
	fake.updateConditionMutex.RLock()
	defer fake.updateConditionMutex.RUnlock()
	fake.updateNrqlConditionMutex.RLock()
	defer fake.updateNrqlConditionMutex.RUnlock()
	fake.updateNrqlConditionStaticMutationMutex.RLock()
	defer fake.updateNrqlConditionStaticMutationMutex.RUnlock()
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	fake.updatePolicyChannelsMutex.RLock()
	defer fake.updatePolicyChannelsMutex.RUnlock()
	fake.updatePolicyMutationMutex.RLock()
	defer fake.updatePolicyMutationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNewRelicAlertsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.NewRelicAlertsClient = new(FakeNewRelicAlertsClient)
