// Code generated by counterfeiter. DO NOT EDIT.
package interfacesfakes

import (
	"sync"

	"github.com/newrelic/newrelic-client-go/pkg/alerts"

	"github.com/newrelic/newrelic-kubernetes-operator/interfaces"
)

type FakeNewRelicAlertsClient struct {
	CreateNrqlConditionStub        func(int, alerts.NrqlCondition) (*alerts.NrqlCondition, error)
	createNrqlConditionMutex       sync.RWMutex
	createNrqlConditionArgsForCall []struct {
		arg1 int
		arg2 alerts.NrqlCondition
	}
	createNrqlConditionReturns struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	createNrqlConditionReturnsOnCall map[int]struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	DeleteNrqlConditionStub        func(int) (*alerts.NrqlCondition, error)
	deleteNrqlConditionMutex       sync.RWMutex
	deleteNrqlConditionArgsForCall []struct {
		arg1 int
	}
	deleteNrqlConditionReturns struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	deleteNrqlConditionReturnsOnCall map[int]struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	GetPolicyStub        func(int) (*alerts.Policy, error)
	getPolicyMutex       sync.RWMutex
	getPolicyArgsForCall []struct {
		arg1 int
	}
	getPolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	getPolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	ListNrqlConditionsStub        func(int) ([]*alerts.NrqlCondition, error)
	listNrqlConditionsMutex       sync.RWMutex
	listNrqlConditionsArgsForCall []struct {
		arg1 int
	}
	listNrqlConditionsReturns struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}
	listNrqlConditionsReturnsOnCall map[int]struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}
	UpdateNrqlConditionStub        func(alerts.NrqlCondition) (*alerts.NrqlCondition, error)
	updateNrqlConditionMutex       sync.RWMutex
	updateNrqlConditionArgsForCall []struct {
		arg1 alerts.NrqlCondition
	}
	updateNrqlConditionReturns struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	updateNrqlConditionReturnsOnCall map[int]struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlCondition(arg1 int, arg2 alerts.NrqlCondition) (*alerts.NrqlCondition, error) {
	fake.createNrqlConditionMutex.Lock()
	ret, specificReturn := fake.createNrqlConditionReturnsOnCall[len(fake.createNrqlConditionArgsForCall)]
	fake.createNrqlConditionArgsForCall = append(fake.createNrqlConditionArgsForCall, struct {
		arg1 int
		arg2 alerts.NrqlCondition
	}{arg1, arg2})
	fake.recordInvocation("CreateNrqlCondition", []interface{}{arg1, arg2})
	fake.createNrqlConditionMutex.Unlock()
	if fake.CreateNrqlConditionStub != nil {
		return fake.CreateNrqlConditionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNrqlConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionCallCount() int {
	fake.createNrqlConditionMutex.RLock()
	defer fake.createNrqlConditionMutex.RUnlock()
	return len(fake.createNrqlConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionCalls(stub func(int, alerts.NrqlCondition) (*alerts.NrqlCondition, error)) {
	fake.createNrqlConditionMutex.Lock()
	defer fake.createNrqlConditionMutex.Unlock()
	fake.CreateNrqlConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionArgsForCall(i int) (int, alerts.NrqlCondition) {
	fake.createNrqlConditionMutex.RLock()
	defer fake.createNrqlConditionMutex.RUnlock()
	argsForCall := fake.createNrqlConditionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionReturns(result1 *alerts.NrqlCondition, result2 error) {
	fake.createNrqlConditionMutex.Lock()
	defer fake.createNrqlConditionMutex.Unlock()
	fake.CreateNrqlConditionStub = nil
	fake.createNrqlConditionReturns = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionReturnsOnCall(i int, result1 *alerts.NrqlCondition, result2 error) {
	fake.createNrqlConditionMutex.Lock()
	defer fake.createNrqlConditionMutex.Unlock()
	fake.CreateNrqlConditionStub = nil
	if fake.createNrqlConditionReturnsOnCall == nil {
		fake.createNrqlConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlCondition
			result2 error
		})
	}
	fake.createNrqlConditionReturnsOnCall[i] = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlCondition(arg1 int) (*alerts.NrqlCondition, error) {
	fake.deleteNrqlConditionMutex.Lock()
	ret, specificReturn := fake.deleteNrqlConditionReturnsOnCall[len(fake.deleteNrqlConditionArgsForCall)]
	fake.deleteNrqlConditionArgsForCall = append(fake.deleteNrqlConditionArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeleteNrqlCondition", []interface{}{arg1})
	fake.deleteNrqlConditionMutex.Unlock()
	if fake.DeleteNrqlConditionStub != nil {
		return fake.DeleteNrqlConditionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNrqlConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionCallCount() int {
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	return len(fake.deleteNrqlConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionCalls(stub func(int) (*alerts.NrqlCondition, error)) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionArgsForCall(i int) int {
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	argsForCall := fake.deleteNrqlConditionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionReturns(result1 *alerts.NrqlCondition, result2 error) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = nil
	fake.deleteNrqlConditionReturns = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionReturnsOnCall(i int, result1 *alerts.NrqlCondition, result2 error) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = nil
	if fake.deleteNrqlConditionReturnsOnCall == nil {
		fake.deleteNrqlConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlCondition
			result2 error
		})
	}
	fake.deleteNrqlConditionReturnsOnCall[i] = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) GetPolicy(arg1 int) (*alerts.Policy, error) {
	fake.getPolicyMutex.Lock()
	ret, specificReturn := fake.getPolicyReturnsOnCall[len(fake.getPolicyArgsForCall)]
	fake.getPolicyArgsForCall = append(fake.getPolicyArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetPolicy", []interface{}{arg1})
	fake.getPolicyMutex.Unlock()
	if fake.GetPolicyStub != nil {
		return fake.GetPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) GetPolicyCallCount() int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	return len(fake.getPolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) GetPolicyCalls(stub func(int) (*alerts.Policy, error)) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) GetPolicyArgsForCall(i int) int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	argsForCall := fake.getPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) GetPolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	fake.getPolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) GetPolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	if fake.getPolicyReturnsOnCall == nil {
		fake.getPolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.getPolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditions(arg1 int) ([]*alerts.NrqlCondition, error) {
	fake.listNrqlConditionsMutex.Lock()
	ret, specificReturn := fake.listNrqlConditionsReturnsOnCall[len(fake.listNrqlConditionsArgsForCall)]
	fake.listNrqlConditionsArgsForCall = append(fake.listNrqlConditionsArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ListNrqlConditions", []interface{}{arg1})
	fake.listNrqlConditionsMutex.Unlock()
	if fake.ListNrqlConditionsStub != nil {
		return fake.ListNrqlConditionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listNrqlConditionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsCallCount() int {
	fake.listNrqlConditionsMutex.RLock()
	defer fake.listNrqlConditionsMutex.RUnlock()
	return len(fake.listNrqlConditionsArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsCalls(stub func(int) ([]*alerts.NrqlCondition, error)) {
	fake.listNrqlConditionsMutex.Lock()
	defer fake.listNrqlConditionsMutex.Unlock()
	fake.ListNrqlConditionsStub = stub
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsArgsForCall(i int) int {
	fake.listNrqlConditionsMutex.RLock()
	defer fake.listNrqlConditionsMutex.RUnlock()
	argsForCall := fake.listNrqlConditionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsReturns(result1 []*alerts.NrqlCondition, result2 error) {
	fake.listNrqlConditionsMutex.Lock()
	defer fake.listNrqlConditionsMutex.Unlock()
	fake.ListNrqlConditionsStub = nil
	fake.listNrqlConditionsReturns = struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsReturnsOnCall(i int, result1 []*alerts.NrqlCondition, result2 error) {
	fake.listNrqlConditionsMutex.Lock()
	defer fake.listNrqlConditionsMutex.Unlock()
	fake.ListNrqlConditionsStub = nil
	if fake.listNrqlConditionsReturnsOnCall == nil {
		fake.listNrqlConditionsReturnsOnCall = make(map[int]struct {
			result1 []*alerts.NrqlCondition
			result2 error
		})
	}
	fake.listNrqlConditionsReturnsOnCall[i] = struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlCondition(arg1 alerts.NrqlCondition) (*alerts.NrqlCondition, error) {
	fake.updateNrqlConditionMutex.Lock()
	ret, specificReturn := fake.updateNrqlConditionReturnsOnCall[len(fake.updateNrqlConditionArgsForCall)]
	fake.updateNrqlConditionArgsForCall = append(fake.updateNrqlConditionArgsForCall, struct {
		arg1 alerts.NrqlCondition
	}{arg1})
	fake.recordInvocation("UpdateNrqlCondition", []interface{}{arg1})
	fake.updateNrqlConditionMutex.Unlock()
	if fake.UpdateNrqlConditionStub != nil {
		return fake.UpdateNrqlConditionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateNrqlConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionCallCount() int {
	fake.updateNrqlConditionMutex.RLock()
	defer fake.updateNrqlConditionMutex.RUnlock()
	return len(fake.updateNrqlConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionCalls(stub func(alerts.NrqlCondition) (*alerts.NrqlCondition, error)) {
	fake.updateNrqlConditionMutex.Lock()
	defer fake.updateNrqlConditionMutex.Unlock()
	fake.UpdateNrqlConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionArgsForCall(i int) alerts.NrqlCondition {
	fake.updateNrqlConditionMutex.RLock()
	defer fake.updateNrqlConditionMutex.RUnlock()
	argsForCall := fake.updateNrqlConditionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionReturns(result1 *alerts.NrqlCondition, result2 error) {
	fake.updateNrqlConditionMutex.Lock()
	defer fake.updateNrqlConditionMutex.Unlock()
	fake.UpdateNrqlConditionStub = nil
	fake.updateNrqlConditionReturns = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionReturnsOnCall(i int, result1 *alerts.NrqlCondition, result2 error) {
	fake.updateNrqlConditionMutex.Lock()
	defer fake.updateNrqlConditionMutex.Unlock()
	fake.UpdateNrqlConditionStub = nil
	if fake.updateNrqlConditionReturnsOnCall == nil {
		fake.updateNrqlConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlCondition
			result2 error
		})
	}
	fake.updateNrqlConditionReturnsOnCall[i] = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createNrqlConditionMutex.RLock()
	defer fake.createNrqlConditionMutex.RUnlock()
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	fake.listNrqlConditionsMutex.RLock()
	defer fake.listNrqlConditionsMutex.RUnlock()
	fake.updateNrqlConditionMutex.RLock()
	defer fake.updateNrqlConditionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNewRelicAlertsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.NewRelicAlertsClient = new(FakeNewRelicAlertsClient)
